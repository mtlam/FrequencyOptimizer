Timer unit: 1e-06 s

Total time: 0.004028 s
File: /users/tcohen/python/projects/FrequencyOptimizer/frequencyoptimizer.py
Function: build_template_fitting_cov_matrix at line 400

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   400                                               @profile
   401                                               def build_template_fitting_cov_matrix(self,nus,nuref=1.0):
   402                                                   '''
   403                                                   Constructs the template-fitting error (i.e., from finite signal-to-noise ratio) covariance matrix
   404                                                   '''
   405                                                   
   406         1          3.0      3.0      0.1          Weffs = self.psrnoise.Weffs
   407         1          3.0      3.0      0.1          if type(Weffs) != np.ndarray:
   408         1         22.0     22.0      0.5              Weffs = np.zeros_like(nus)+Weffs
   409         1         23.0     23.0      0.6          B = self.get_bandwidths(nus)
   410                                                  
   411         1          1.0      1.0      0.0          if self.psrnoise.glon is None or self.psrnoise.glat is None:
   412                                                       Tgal = 20*np.power(nus/0.408,-1*self.galnoise.beta)
   413                                                   else:
   414         1          1.0      1.0      0.0              Tgal = np.array([tskypy(self.galnoise.tskylist,
   415                                                                               self.psrnoise.glat,
   416                                                                               self.psrnoise.glon,
   417       101        374.0      3.7      9.3                                      nu*1e3) for nu in nus])
   418         1          4.0      4.0      0.1          Tsys = self.telnoise.get_T_const(nus) + Tgal
   419                                           
   420                                                   
   421         1          1.0      1.0      0.0          tau = 0.0
   422         1          1.0      1.0      0.0          if self.psrnoise.DM != 0.0 and self.psrnoise.D != 0.0 and self.galnoise.T_e != 0.0 and self.galnoise.fillingfactor != 0:
   423         1          6.0      6.0      0.1              tau = 1.417e-6 * (self.galnoise.fillingfactor/0.2)**-1 * self.psrnoise.DM**2 * self.psrnoise.D**-1 * np.power(self.galnoise.T_e/100,-1.35)
   424                                           
   425         1         23.0     23.0      0.6          numer =  (self.psrnoise.I_0 * 1e-3) * np.power(nus/nuref,-1*self.psrnoise.alpha)*np.sqrt(self.telnoise.Npol*B*1e9*self.telnoise.T) 
   426                                                   #* np.exp(-1*tau*np.power(nus/nuref,-2.1)) #
   427                                           
   428         1          3.0      3.0      0.1          denom = Tsys / self.telnoise.get_gain(nus)
   429         1          3.0      3.0      0.1          S = self.psrnoise.Uscale*numer/denom # numer/denom is the mean S/N over all phase. Need to adjust by the factor Uscale.
   430                                           
   431                                                   
   432                                                   #print numer,denom
   433                                           
   434                                                   #print nus,B
   435                                                   #print self.psrnoise.I_0,self.telnoise.gain,B,self.telnoise.T#np.power(nus/nuref,-1*self.psrnoise.alpha)
   436                                                   
   437         1          7.0      7.0      0.2          sigmas = self.template_fitting_error(S,Weffs,1)
   438                                           
   439         1          1.0      1.0      0.0          if self.psrnoise.taud > 0.0:
   440         1         14.0     14.0      0.3              tauds = DISS.scale_tau_d(self.psrnoise.taud,nuref,nus)
   441         1       3428.0   3428.0     85.1              retval = self.scattering_modifications(tauds,Weffs)
   442                                                       #retval = 1
   443         1          4.0      4.0      0.1              sigmas *= retval #??
   444                                           
   445                                                   # Any enormous values should not cause an overflow
   446         1          4.0      4.0      0.1          inds = np.where(sigmas>1e100)[0]
   447         1          2.0      2.0      0.0          sigmas[inds] = 1e100
   448                                           
   449                                           
   450                                                   # implement masks here
   451         1          1.0      1.0      0.0          if self.masks is not None:
   452                                                       for i,mask in enumerate(self.masks):
   453                                                           maskmin,maskmax = mask
   454                                                           inds = np.where(np.logical_and(nus>=maskmin,nus<=maskmax))[0]
   455                                                           sigmas[inds] = 0.0 #???
   456                                                   
   457         1         99.0     99.0      2.5          return np.matrix(np.diag(sigmas**2))

