Timer unit: 1e-06 s

Total time: 0.014258 s
File: /users/tcohen/python/projects/FrequencyOptimizer/frequencyoptimizer.py
Function: calc_single at line 631

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   631                                               @profile
   632                                               def calc_single(self,nus,retall=False):
   633                                                   '''
   634                                                   Calculate sigma_TOA given a selection of frequencies
   635                                                   '''
   636         1       4078.0   4078.0     28.6          sncov = self.build_template_fitting_cov_matrix(nus)
   637         1       4452.0   4452.0     31.2          jittercov = self.build_jitter_cov_matrix() #needs to have same length as nus!
   638         1        124.0    124.0      0.9          disscov = self.build_scintillation_cov_matrix(nus) 
   639                                           
   640         1         52.0     52.0      0.4          cov = sncov + jittercov + disscov
   641                                           
   642         1       1085.0   1085.0      7.6          sigma2 = epoch_averaged_error(cov,var=True)
   643                                           
   644         1        274.0    274.0      1.9          sigmasn2 = epoch_averaged_error(sncov, var=True)
   645                                           
   646         1          1.0      1.0      0.0          if self.vverbose:
   647                                                       with warnings.catch_warnings():
   648                                                           warnings.simplefilter("ignore")
   649                                                           print("White noise: %0.3f us"%np.sqrt(sigma2))
   650                                                           print("   Template-fitting error: %0.3f us"%np.sqrt(epoch_averaged_error(sncov,var=True)))
   651                                                           if np.all(jittercov == jittercov[0,0]):
   652                                                               print("   Jitter error: %0.3f us"%np.sqrt(jittercov[0,0]))
   653                                                           else:
   654                                                               print("   Jitter error: %0.3f us"%np.sqrt(epoch_averaged_error(jittercov,var=True)))
   655                                                           if np.all(disscov == disscov[0,0]):
   656                                                               print("   Scintillation error: %0.3f us"%np.sqrt(disscov[0,0]))
   657                                                           else:
   658                                                               print("   Scintillation error: %0.3f us"%np.sqrt(round(epoch_averaged_error(disscov,var=True),6)))
   659                                           
   660                                           
   661                                                   
   662                                                   
   663         1        343.0    343.0      2.4          sigmatel2 = epoch_averaged_error(self.build_polarization_cov_matrix(nus))
   664                                           
   665                                           
   666         1       3842.0   3842.0     26.9          sigmadm2 = self.DM_misestimation(nus,cov,covmat=True)**2
   667                                           
   668                                           
   669         1          2.0      2.0      0.0          sigma = np.sqrt(sigma2 + sigmadm2 + sigmatel2) #need to include PBF errors?
   670                                           
   671         1          0.0      0.0      0.0          if self.vverbose:
   672                                                       print("Telescope noise: %0.3f us"%np.sqrt(sigmatel2))
   673                                           
   674                                           
   675         1          0.0      0.0      0.0          if self.vverbose:
   676                                                       print("Total noise: %0.3f us"%sigma)
   677                                                       print("")
   678                                           
   679                                                   
   680         1          1.0      1.0      0.0          if self.psrnoise.P is not None and sigma > self.psrnoise.P:
   681                                                       return self.psrnoise.P
   682                                           
   683                                                       
   684         1          3.0      3.0      0.0          return sigma, np.sqrt(sigma2), np.sqrt(sigmadm2), np.sqrt(sigmatel2),\
   685         1          1.0      1.0      0.0              np.sqrt(sigmasn2)

