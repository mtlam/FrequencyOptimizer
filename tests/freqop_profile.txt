Timer unit: 1e-06 s

Total time: 0.2895 s
File: /users/tcohen/python/projects/FrequencyOptimizer/frequencyoptimizer.py
Function: evalDMnuError at line 138

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   138                                           @profile
   139                                           def evalDMnuError(dnuiss,nu1,nu2,g=0.46,q=1.15,screen=False,fresnel=False):
   140                                               # nu2 should be less than nu1
   141                                               # nu in GHz, dnuiss in GHz
   142                                               # return value in microseconds
   143                                               # Based on equation 25
   144                                               # if fresnel==True, the first argument is phiF
   145     19800      16925.0      0.9      5.8      if screen:
   146                                                   g = 1
   147     19800       8903.0      0.4      3.1      if fresnel:
   148                                                   phiF = dnuiss
   149                                               else:
   150     19800      32455.0      1.6     11.2          phiF = 9.6 * ((nu1 / dnuiss)/100)**(5.0/12) #equation 15
   151     19800      10112.0      0.5      3.5      r = nu1/nu2
   152     19800     221105.0     11.2     76.4      return 0.184 * g * q * E_beta(r) * (phiF**2  / (nu1 * 1000))

Total time: 0.421259 s
File: /users/tcohen/python/projects/FrequencyOptimizer/frequencyoptimizer.py
Function: DM_misestimation at line 532

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   532                                               @profile
   533                                               def DM_misestimation(self,nus,errs,covmat=False):#,fullDMnu=True):
   534                                                   '''
   535                                                   Return sum of DM mis-estimation errors
   536                                                   '''
   537         1          2.0      2.0      0.0          N = len(nus)
   538         1         36.0     36.0      0.0          X = np.matrix(np.ones((N,2))) #design matrix
   539       101        108.0      1.1      0.0          for i,nu in enumerate(nus):
   540       100        141.0      1.4      0.0              X[i,1] = K/nu**2
   541                                           
   542                                                   # Template-Fitting Errors
   543         1          1.0      1.0      0.0          if covmat is False:
   544                                                       V = np.matrix(np.diag(errs**2)) #weights matrix
   545                                                   else:
   546         1          0.0      0.0      0.0              V = errs
   547         1          6.0      6.0      0.0          XT = X.T
   548         1        704.0    704.0      0.2          VI = V.I
   549         1        244.0    244.0      0.1          P = np.dot(np.dot(XT,VI),X).I 
   550                                           
   551                                           
   552                                           
   553                                           
   554                                                   # for now, ignore covariances and simply return the t_inf error    
   555         1          6.0      6.0      0.0          template_fitting_var = P[0,0] 
   556                                           
   557                                                   ## Frequency-Dependent DM
   558                                                   #DM_nu_var = evalDMnuError(self.psrnoise.dnud,np.max(nus),np.min(nus))**2 / 25.0
   559         1          2.0      2.0      0.0          if self.full:
   560         1     376141.0 376141.0     89.3              DM_nu_cov = self.build_DMnu_cov_matrix(nus)
   561         1      39446.0  39446.0      9.4              DM_nu_var = epoch_averaged_error(DM_nu_cov,var=True)
   562                                                       #print nus
   563                                                       # FOO
   564                                                       #print DM_nu_cov
   565                                                       #print DM_nu_var
   566         1          2.0      2.0      0.0              if DM_nu_var < 0.0:# or np.isnan(DM_nu_var): #no longer needed
   567                                                           DM_nu_var = 0 
   568                                                   else: # [deprecated], please be aware!
   569                                                       DM_nu_var = evalDMnuError(self.psrnoise.dnud,np.max(nus),np.min(nus))**2 / 25.0
   570                                           
   571                                           
   572                                                   
   573                                           
   574                                                   # PBF errors (scattering), included already in cov matrix?
   575                                                   # Scattering error, assume this is proportional to nu^-4.4? or 4?
   576         1         17.0     17.0      0.0          chromatic_components = self.psrnoise.tauvar * np.power(nus,-4.4)
   577         1       4394.0   4394.0      1.0          scattering_var = np.dot(np.dot(np.dot(P,XT),VI),chromatic_components)[0,0]**2
   578                                           
   579                                           
   580                                           
   581                                           
   582         1          7.0      7.0      0.0          retval = np.sqrt(template_fitting_var + DM_nu_var + scattering_var)
   583                                                   
   584         1          1.0      1.0      0.0          if self.vverbose:
   585                                                       print("DM misestimation noise: %0.3f us"%retval)
   586                                                       
   587                                                       print("   DM estimation error: %0.3f us"%np.sqrt(template_fitting_var))
   588                                                       print("   DM(nu) error: %0.3f us"%np.sqrt(DM_nu_var))
   589                                                       print("   Chromatic term error: %0.3f us"%np.sqrt(scattering_var))
   590                                           
   591                                           
   592         1          1.0      1.0      0.0          return retval

Total time: 0.560582 s
File: /users/tcohen/python/projects/FrequencyOptimizer/frequencyoptimizer.py
Function: build_DMnu_cov_matrix at line 595

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   595                                               @profile
   596                                               def build_DMnu_cov_matrix(self,nus,g=0.46,q=1.15,screen=False,fresnel=False,nuref=1.0):
   597                                                   '''
   598                                                   Constructs the frequency-dependent DM error covariance matrix
   599                                                   '''
   600                                           
   601         2         48.0     24.0      0.0          dnud = DISS.scale_dnu_d(self.psrnoise.dnud,nuref,nus)
   602                                           
   603                                           
   604                                           
   605                                                   # Construct the matrix, this could be sped up by a factor of two
   606         2         90.0     45.0      0.0          retval = np.matrix(np.zeros((len(nus),len(nus))))
   607       202        117.0      0.6      0.0          for i in range(len(nus)):
   608     20200      10675.0      0.5      1.9              for j in range(len(nus)):
   609                                           
   610     20000      16926.0      0.8      3.0                  if nus[i] == nus[j]:
   611       200         83.0      0.4      0.0                      continue # already set to zero
   612                                                           
   613                                                           # speed up
   614                                                           #if retval[j,i] != 0.0:
   615                                                           #    continue
   616                                                           #    retval[i,j] = retval[j,i]
   617                                                           #    continue
   618                                                           
   619                                                           #nu2 should be less than nu1
   620     19800      13875.0      0.7      2.5                  if nus[i] > nus[j]: 
   621      9900       5242.0      0.5      0.9                      nu1 = nus[i]
   622      9900       5109.0      0.5      0.9                      nu2 = nus[j]
   623      9900       5325.0      0.5      0.9                      dnuiss = dnud[i]
   624                                                           else:
   625      9900       6267.0      0.6      1.1                      nu1 = nus[j]
   626      9900       5233.0      0.5      0.9                      nu2 = nus[i]
   627      9900       9463.0      1.0      1.7                      dnuiss = dnud[j]
   628                                                           #dnuiss = DISS.scale_dnu_d(self.psrnoise.dnud,nuref,nu1) #correct direction now, but should be nu1?
   629                                                               
   630     19800     445722.0     22.5     79.5                  sigma = evalDMnuError(dnuiss,nu1,nu2,g=g,q=q,screen=screen,fresnel=fresnel)
   631                                           
   632     19800      36407.0      1.8      6.5                  retval[i,j] = sigma**2
   633                                                           #retval[j,i] = sigma**2
   634                                                       #raise SystemExit
   635         2          0.0      0.0      0.0          return retval

Total time: 0.743747 s
File: /users/tcohen/python/projects/FrequencyOptimizer/frequencyoptimizer.py
Function: calc_single at line 664

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   664                                               @profile
   665                                               def calc_single(self,nus):
   666                                                   '''
   667                                                   Calculate sigma_TOA given a selection of frequencies
   668                                                   '''
   669         1      11297.0  11297.0      1.5          sncov = self.build_template_fitting_cov_matrix(nus)
   670         1       6920.0   6920.0      0.9          jittercov = self.build_jitter_cov_matrix() #needs to have same length as nus!
   671         1        212.0    212.0      0.0          disscov = self.build_scintillation_cov_matrix(nus) 
   672                                           
   673         1         85.0     85.0      0.0          cov = sncov + jittercov + disscov
   674                                           
   675         1      19638.0  19638.0      2.6          sigma2 = epoch_averaged_error(cov,var=True)
   676                                           
   677         1        931.0    931.0      0.1          sigmasn2 = epoch_averaged_error(sncov, var=True)
   678                                           
   679         1          2.0      2.0      0.0          if self.vverbose:
   680                                                       with warnings.catch_warnings():
   681                                                           warnings.simplefilter("ignore")
   682                                                           print("White noise: %0.3f us"%np.sqrt(sigma2))
   683                                                           print("   Template-fitting error: %0.3f us"%np.sqrt(epoch_averaged_error(sncov,var=True)))
   684                                                           if np.all(jittercov == jittercov[0,0]):
   685                                                               print("   Jitter error: %0.3f us"%np.sqrt(jittercov[0,0]))
   686                                                           else:
   687                                                               print("   Jitter error: %0.3f us"%np.sqrt(epoch_averaged_error(jittercov,var=True)))
   688                                                           if np.all(disscov == disscov[0,0]):
   689                                                               print("   Scintillation error: %0.3f us"%np.sqrt(disscov[0,0]))
   690                                                           else:
   691                                                               print("   Scintillation error: %0.3f us"%np.sqrt(round(epoch_averaged_error(disscov,var=True),6)))
   692                                           
   693                                           
   694                                                   
   695                                                   
   696         1       1523.0   1523.0      0.2          sigmatel2 = epoch_averaged_error(self.build_polarization_cov_matrix(nus))
   697                                           
   698                                           
   699         1     421521.0 421521.0     56.7          sigmadm2 = self.DM_misestimation(nus,cov,covmat=True)**2
   700                                           
   701                                           
   702         1          4.0      4.0      0.0          sigma = np.sqrt(sigma2 + sigmadm2 + sigmatel2) #need to include PBF errors?
   703                                           
   704         1          1.0      1.0      0.0          profile.runctx('self.build_DMnu_cov_matrix(nus)',
   705         1     281613.0 281613.0     37.9                         globals(), locals())
   706                                                   #profile.add_function(fop_inst.DM_misestimation(nus,cov,covmat=True))
   707                                           
   708                                                   profile.print_stats()
   709                                           
   710                                           
   711                                                   if self.vverbose:
   712                                                       print("Telescope noise: %0.3f us"%np.sqrt(sigmatel2))
   713                                           
   714                                           
   715                                                   if self.vverbose:
   716                                                       print("Total noise: %0.3f us"%sigma)
   717                                                       print("")
   718                                           
   719                                                   
   720                                                   if self.psrnoise.P is not None and sigma > self.psrnoise.P:
   721                                                       return self.psrnoise.P
   722                                           
   723                                                   return sigma, np.sqrt(sigma2), np.sqrt(sigmadm2), np.sqrt(sigmatel2),\
   724                                                       np.sqrt(sigmasn2)

