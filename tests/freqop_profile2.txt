Timer unit: 1e-06 s

Total time: 0.268011 s
File: /users/tcohen/python/projects/FrequencyOptimizer/frequencyoptimizer.py
Function: evalDMnuError at line 138

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   138                                           @profile
   139                                           def evalDMnuError(dnuiss,nu1,nu2,g=0.46,q=1.15,screen=False,fresnel=False):
   140                                               # nu2 should be less than nu1
   141                                               # nu in GHz, dnuiss in GHz
   142                                               # return value in microseconds
   143                                               # Based on equation 25
   144                                               # if fresnel==True, the first argument is phiF
   145     19800       9098.0      0.5      3.4      if screen:
   146                                                   g = 1
   147     19800       7302.0      0.4      2.7      if fresnel:
   148                                                   phiF = dnuiss
   149                                               else:
   150     19800      31211.0      1.6     11.6          phiF = 9.6 * ((nu1 / dnuiss)/100)**(5.0/12) #equation 15
   151     19800       9427.0      0.5      3.5      r = nu1/nu2
   152     19800     210973.0     10.7     78.7      return 0.184 * g * q * E_beta(r) * (phiF * phiF / (nu1 * 1000))

Total time: 0.499957 s
File: /users/tcohen/python/projects/FrequencyOptimizer/frequencyoptimizer.py
Function: build_DMnu_cov_matrix at line 594

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   594                                               @profile
   595                                               def build_DMnu_cov_matrix(self,nus,g=0.46,q=1.15,screen=False,fresnel=False,nuref=1.0):
   596                                                   '''
   597                                                   Constructs the frequency-dependent DM error covariance matrix
   598                                                   '''
   599                                           
   600         2         52.0     26.0      0.0          dnud = DISS.scale_dnu_d(self.psrnoise.dnud,nuref,nus)
   601                                           
   602                                           
   603                                           
   604                                                   # Construct the matrix, this could be sped up by a factor of two
   605         2         85.0     42.5      0.0          retval = np.matrix(np.zeros((len(nus),len(nus))))
   606       202         92.0      0.5      0.0          for i in range(len(nus)):
   607     20200      10224.0      0.5      2.0              for j in range(len(nus)):
   608                                           
   609     20000      17517.0      0.9      3.5                  if nus[i] == nus[j]:
   610       200         87.0      0.4      0.0                      continue # already set to zero
   611                                                           
   612                                                           # speed up
   613                                                           #if retval[j,i] != 0.0:
   614                                                           #    continue
   615                                                           #    retval[i,j] = retval[j,i]
   616                                                           #    continue
   617                                                           
   618                                                           #nu2 should be less than nu1
   619     19800      13659.0      0.7      2.7                  if nus[i] > nus[j]: 
   620      9900       5090.0      0.5      1.0                      nu1 = nus[i]
   621      9900       4901.0      0.5      1.0                      nu2 = nus[j]
   622      9900       5191.0      0.5      1.0                      dnuiss = dnud[i]
   623                                                           else:
   624      9900       5259.0      0.5      1.1                      nu1 = nus[j]
   625      9900      11307.0      1.1      2.3                      nu2 = nus[i]
   626      9900       5137.0      0.5      1.0                      dnuiss = dnud[j]
   627                                                           #dnuiss = DISS.scale_dnu_d(self.psrnoise.dnud,nuref,nu1) #correct direction now, but should be nu1?
   628                                                               
   629     19800     387935.0     19.6     77.6                  sigma = evalDMnuError(dnuiss,nu1,nu2,g=g,q=q,screen=screen,fresnel=fresnel)
   630                                           
   631     19800      33419.0      1.7      6.7                  retval[i,j] = sigma**2
   632                                                           #retval[j,i] = sigma**2
   633                                                       #raise SystemExit
   634         2          2.0      1.0      0.0          return retval

