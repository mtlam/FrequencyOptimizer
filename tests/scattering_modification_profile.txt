Timer unit: 1e-06 s

Total time: 0.003445 s
File: /users/tcohen/python/projects/FrequencyOptimizer/frequencyoptimizer.py
Function: scattering_modifications at line 474

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   474                                               @profile    
   475                                               def scattering_modifications(self,tauds,Weffs,filename="ampratios.npz",directory=None):
   476                                                   '''
   477                                                   Takes the calculations of the convolved Gaussian-exponential simulations and returns the multiplicative factor applies to the template-fitting errors
   478                                                   '''
   479         1         34.0     34.0      1.0          if len(glob.glob(filename))!=1:
   480         1          1.0      1.0      0.0              if directory is None:
   481         1          9.0      9.0      0.3                  directory = os.path.join(os.path.dirname(__file__), '')
   482                                                   else:
   483                                                       directory = ""
   484         1          1.0      1.0      0.0          if type(Weffs) != np.ndarray:
   485                                                       Weffs = np.zeros_like(nus)+Weffs
   486                                           
   487         1          0.0      0.0      0.0          if self.scattering_mod_f is None:
   488         1        858.0    858.0     24.9              data = np.load(directory+"ampratios.npz")
   489         1        632.0    632.0     18.3              ratios = data['ratios']
   490         1        471.0    471.0     13.7              ampratios = data['ampratios']
   491         1        457.0    457.0     13.3              Weffratios = data['Weffratios']
   492         1        465.0    465.0     13.5              errratios = data['errratios']
   493                                                       
   494         1         12.0     12.0      0.3              logratios = np.log10(ratios)
   495         1          7.0      7.0      0.2              logerrratios = np.log10(errratios)
   496                                           
   497         1        345.0    345.0     10.0              self.scattering_mod_f = interpolate.interp1d(logratios,logerrratios)
   498                                           
   499         1          5.0      5.0      0.1          dataratios = np.array(tauds)/np.array(Weffs) #sigma_Ws?
   500                                           
   501         1         12.0     12.0      0.3          retval = np.zeros_like(dataratios) + 1.0
   502         1         11.0     11.0      0.3          inds = np.where(dataratios > 0.01)[0] #must be greater than this value
   503         1        125.0    125.0      3.6          retval[inds] = 10**self.scattering_mod_f(np.log10(dataratios[inds]))
   504         1          0.0      0.0      0.0          return retval

